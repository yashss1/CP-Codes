1 = Codeforces 7MorseCode.cpp (Use of String)
2 = Codeforces 3.cpp (Distinct Digits)
3 = To convert to lowercase use "tolower()" function, and vice versa.
    putchar(tolower(str[i])) puts only a character of ith place of String.
4 = To input integer string : string a, b;    a.size() = length of string.    
5 = To conert entire string to lower or upper use : strlwr(a);
6 = sort(arr1, arr1 + n, greater<int>()); //Sorting array in desecending order.
7 = string.find(xyz); To find something in the string.
8 =  sort(s1.begin(), s1.end());  To arrange the string in Alphabetical order.
9 = Function returning corresponding number according to the alphabet.
    int alphabetToNumber(char x)
    return (int)x - 96;

10 = Sorting a string in Alphabetical order.
    void sortString(string &str)  
    { 
          sort(str.begin(), str.end()); 
          cout << str; 
    } 

11 = To print day of the Week corresponding to the number.
    const char * WEEKS[] = { "Monday", "Tuesday", "Wednesday", 
                            "Thursday", "Friday", "Saturday", 
                            "Sunday"};
    If we didn't used 'const' it will show some kind of warning.

12 = Making arrays of the string :
        string arr[n];
        for (int i = 0; i < n; i++)
        {
            cout << arr[i][0]<<" ";   // Printing only first word
        }

13 = IMportant AlgO: Prints all the prime numbers less than given 'n';
    void SieveOfEratosthenes(ll n)
    {
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    for (ll p = 2; p * p <= n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (ll i = p * 2; i <= n; i += p)
                prime[i] = false;
        }
    }

    // Print all prime numbers
    for (ll p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
    }

14 = list1.unique(); --> Removes duplicate elements from a list.

15 = Conversion of whole String to uppercase or lowercase using STL in C++
    #include<bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    // su is the string which is converted to uppercase 
    string su = "Jatin Goyal"; 
  
    // using transform() function and ::toupper in STL 
    transform(su.begin(), su.end(), su.begin(), ::toupper); 
    cout << su << endl; 
  
    // sl is the string which is converted to lowercase 
    string sl = "Jatin Goyal"; 
  
    // using transform() function and ::tolower in STL 
    transform(sl.begin(), sl.end(), sl.begin(), ::tolower); 
    cout << sl << endl; 
  
    return 0; 
} 


16 = Number of times a letter appeared in a string
    s-> string
     vector<int> v(26, 0);
            for (int i = 0; i < l; i++)
            {
                v[s[i] - 'a'] += 1;
            }
                OR
      vector<int> v(26, 0);
            for(auto ch : s) v[ch - 'a']++;
 
17 =  Left and Right Rotating a String;
     void leftrotate(string &s, int d)
{
    reverse(s.begin(), s.begin()+d);
    reverse(s.begin()+d, s.end());
    reverse(s.begin(), s.end());
}
 
// In-place rotates s towards right by d
void rightrotate(string &s, int d)
{
   leftrotate(s, s.length()-d);
}


18 = Converting Binary string to Integer : stoi(my_string, 0, 2);

19 = Returns count of occurences of value in range:
// C++ program for count in C++ STL for 
// array 
#include <bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    int arr[] = { 3, 2, 1, 3, 3, 5, 3 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Number of times 3 appears : "
         << count(arr, arr + n, 3); 
  
    return 0; 
} 
Number of times 3 appears : 4

20 = 
 FINF FIRST of;
            std::find_first_of is used to compare elements between two containers. It compares all the elements in a range [first1,last1) with the elements in the range [first2,last2), and if any of the elements present in the second range is found in the first one , then it returns an iterator to that element.

If there are more than one element common in both the ranges, then an iterator to the first common element present in the first container is returned. In case there is no match, then iterator pointing to last1 is returned.


21=  Using vector as String (Taking input without spaces)
vector<int> v(n);
  for (int &e : v) {
    cin >> e;
  }


22 = When we dont know the number of lines of input, and we have to print 'NO' for each line.
inputCopy
Is it rated?
Is it rated?
Is it rated?
outputCopy
NO
NO
NO

void yash()
{
    string s;
    while (cin >> s)
        cout << "NO\n";
}


23 = inding index of an element ; int p = find(a.begin(), a.end(), x) - a.begin();

24 = Rotating a speciic part of an array/vector 
        rotate(a.begin(), a.begin() + p, a.begin() + p + 1)
        Eg = p = 4
        2 1 1 4 3 3 1 ==> 3 2 1 1 4   3 1  ==> 3 2 1 1 4 3 1

25 = TO calculate number of diffrent bits in two binary string =, instead of using for in for, do
        Number of bits = count(1) = X xor Y        

26 = Copying Segment of a Vector to Another
        vector<int> v1(next(begin(v), i), next(begin(v), i+d));
        for(auto ele:v1)cout<<ele<<" ";cout<<"\n";

27 = Adding only unique elements from an array or vector, for this SET is used
    set <int> s(a+i,a+i+d);   // The size of this set s.size(), is the number of unique elements in that subarray             

28 = Efficient algo to check prime number :
    int isPrime(int n) {
	rep(i, 2, ceil(sqrt(n)) + 1) {
		if (n % i == 0)return 0;
	}
	return 1;
}

29 =  Best Power Function :
    
int power(int a, int b)
{
    if (b == 0)
        return 1;
    else if (b % 2 == 0)
        return power((a * a) % mod, b >> 1) % mod;
    else
        return (a * power((a * a) % mod, b >> 1) % mod);
}


Comparator in vector pair, first value asceding sort, second value descending sort.
30 = bool cmp(pair<int,int>&p1, pair<int,int>&p2){
    if(p1.first!=p2.first)return p1.first<p2.first;
    else{
      return p1.second>p2.second;
    }
}

31 = Factorial & nPr & nCr 
    ll fact[3000007] = {0};
    void facto() {
    fact[0] = 1; fact[1] = 1; for (int i = 2; i < 300000; i++)fact[i] = (fact[i - 1] * i) % MOD;
    }

    ll ncr(ll n, ll r) {
    if (r > n)return 0;
    ll res = 1; res = fact[n]; res = (res * (fpow(fact[r], MOD - 2))) % MOD; res = (res * (fpow(fact[n - r], MOD - 2))) % MOD; return res;
}
ll npr(ll n, ll r) {
    if (r > n)return 0;
    ll res = 1; res = fact[n]; res = (res * (fpow(fact[n - r], MOD - 2))) % MOD; return res;
}

32 = Two points are on any diagonal if x1+y1 == x2+y2 OR x1-y1 == x2-y2
33 = Iterating map cnt1 -> 
    for (auto [d, cnt] : cnt1) {
    ans += cnt * (cnt - 1) / 2;
     }


34 = Printing Priority queue
    void showpq(priority_queue<pii> gq)
{
    priority_queue<pii> g = gq;
    while (!g.empty()) {
        cout << g.top().second<<" ";
        g.pop();
    }
    cout << '\n';
}

35 =  upto more than 2^50
string toBinary(int n)
{
  string r;
  while (n != 0) {r = (n % 2 == 0 ? "0" : "1") + r; n /= 2;}
  return r;
}


36 = Upper Bound of (n-x)/x can be written as
    ((n - x) + x - 1) / x

37 = Sorting vector of vectors
sort(all(v), [](const std::vector<int>& a, const std::vector<int>& b) {
    return a[2] < b[2];
  });


38 = Since gcd(11,111)=1, by the Chicken McNugget Theorem, all numbers greater than 1099 can be written as a sum of 11 and 111. We can use brute force to find the answer to all values less than or equal to 1099 and answer yes for all other numbers.

39 = // Binary Exponentiation O(logn)
// n^m mod p
int power(int n, int m, int p)
{
    int res = 1;
    while (m > 0)
    {
        if (m & 1)
            res = (res * 1ll * n) % p;
        n = (n * 1ll * n) % p;
        m /= 2;
    }
    return res;
}

40 = For Checking Prime 

41 = Decimal to Binary
string decimalToBinary(int n)
{
    string s = bitset<64> (n).to_string();
    const auto loc1 = s.find('1');
    if (loc1 != string::npos)
        return s.substr(loc1);
    return "0";
}


42 = Binary To Decimal -> cout << stoi(s, 0, 2) << "\n";